[{"F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\index.js":"1","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\App.js":"2","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\reportWebVitals.js":"3","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Layout\\Home.js":"4","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Context\\GlobalContext.js":"5","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Context\\HeaderContext.js":"6","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Common\\Footer\\Footer.js":"7","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Layout\\MyAppLayout.js":"8","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\TransferMoney\\TransferMoney.js":"9","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\SetUpStanding\\SetUpStanding.js":"10","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\PrivateBankingPayment\\PrivateBankingPayment.js":"11","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\StandingOrder\\StandingOrder.js":"12","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\SendMoney\\SendMoney.js":"13","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\ManagePayee\\ManagePayee.js":"14","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\MobileTopUp\\MobileTopUp.js":"15","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\DirectDebit\\DirectDebit.js":"16","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\FutureDatedPayment\\FutureDatedPayment.js":"17","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Layout\\MyApp.js":"18","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Context\\TransactionContext.js":"19","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Common\\Header\\Header.js":"20","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\Success\\AddedSuccess.js":"21"},{"size":517,"mtime":1615810114782,"results":"22","hashOfConfig":"23"},{"size":3650,"mtime":1616567245051,"results":"24","hashOfConfig":"23"},{"size":375,"mtime":1615810114784,"results":"25","hashOfConfig":"23"},{"size":3012,"mtime":1615812863405,"results":"26","hashOfConfig":"23"},{"size":289,"mtime":1615810114766,"results":"27","hashOfConfig":"23"},{"size":913,"mtime":1615810114771,"results":"28","hashOfConfig":"23"},{"size":824,"mtime":1615869682934,"results":"29","hashOfConfig":"23"},{"size":9183,"mtime":1616663307668,"results":"30","hashOfConfig":"23"},{"size":2838,"mtime":1615812741804,"results":"31","hashOfConfig":"23"},{"size":2204,"mtime":1615813039217,"results":"32","hashOfConfig":"23"},{"size":2905,"mtime":1615813147208,"results":"33","hashOfConfig":"23"},{"size":2646,"mtime":1615813032506,"results":"34","hashOfConfig":"23"},{"size":2178,"mtime":1615812601249,"results":"35","hashOfConfig":"23"},{"size":939,"mtime":1615813096477,"results":"36","hashOfConfig":"23"},{"size":1890,"mtime":1615813112297,"results":"37","hashOfConfig":"23"},{"size":7744,"mtime":1615813001129,"results":"38","hashOfConfig":"23"},{"size":2669,"mtime":1615813065006,"results":"39","hashOfConfig":"23"},{"size":25686,"mtime":1617369985880,"results":"40","hashOfConfig":"23"},{"size":7550,"mtime":1617280436927,"results":"41","hashOfConfig":"23"},{"size":778,"mtime":1616505348305,"results":"42","hashOfConfig":"23"},{"size":1007,"mtime":1616850026533,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"ocdrq7",{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"46"},"F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\index.js",[],["103","104"],"F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\App.js",["105","106","107","108","109","110"],"import './App.css';\r\n//import Carousel from 'react-bootstrap/Carousel'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n//import '../node_modules/react-bootstrap/dist/react-bootstrap';\r\nimport React, { useEffect, useState }from 'react';\r\nimport HomeComponent from './Layout/Home';\r\nimport MyAppComponent from './Layout/MyApp';\r\n\r\nimport SendMoney  from './Component/SendMoney/SendMoney';\r\nimport TransferMoney from \"./Component/TransferMoney/TransferMoney\";\r\nimport StandingOrder from \"./Component/StandingOrder/StandingOrder\";\r\nimport SetUpStanding from \"./Component/SetUpStanding/SetUpStanding\";\r\nimport PrivateBankingPayment from \"./Component/PrivateBankingPayment/PrivateBankingPayment\";\r\nimport MobileTopUp from \"./Component/MobileTopUp/MobileTopUp\";\r\nimport DirectDebit from \"./Component/DirectDebit/DirectDebit\";\r\nimport FutureDatedPayment from \"./Component/FutureDatedPayment/FutureDatedPayment\";\r\nimport ManagePayee from \"./Component/ManagePayee/ManagePayee\";\r\n\r\nimport MyAppLayout from \"./Layout/MyAppLayout\";\r\n\r\nimport Footer from \"./Common/Footer/Footer\";\r\n\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport { GlobalProvider } from \"./Context/GlobalContext\";\r\nimport { HeaderProvider } from \"./Context/HeaderContext\";\r\nimport { TransactionProvider } from \"./Context/TransactionContext\";\r\n\r\nimport data from './Common/customers.json'\r\n\r\nfunction App() {\r\n\r\n  const [HeaderName,setHeaderName] = useState(\"\");\r\n  const [IsBack,setIsBack] = useState(false);\r\n  const [Data, setData] = useState(data);\r\n\r\n  // useEffect(() => {\r\n  //     fetch(\"./Common/customers.json\")\r\n  //       .then(res=>res.json())\r\n  //       .then(data=>setData(data))\r\n\r\n  //   }\r\n  // );\r\n\r\n  return (\r\n    <GlobalProvider value= {{Global: Data}} >\r\n    <HeaderProvider>\r\n    <TransactionProvider>  \r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n          <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"/>\r\n\r\n\r\n            <Switch>\r\n              <Route path=\"/\" exact component= { (props) => ( <HomeComponent  /> )} />\r\n              <Route path=\"/myApp\" component={(props) => ( <MyAppComponent   /> )} />\r\n                      {/* <Route path=\"/myApp/myAccount\" exact component= { (props) => ( <div>myAccount page</div> )} /> */}\r\n              <Route path=\"/myAppLayout\" component={(props) => ( <MyAppLayout /> )} />\r\n            \r\n              <Route path=\"/sendMoney\" component={ (props) => ( <SendMoney   /> )} />\r\n              <Route path=\"/transferMoney\" component={(props) => ( <TransferMoney   /> )} />\r\n              <Route path=\"/standingOrders\" component={(props) => ( <StandingOrder   /> )} />\r\n              <Route path=\"/setUpNewOrder\" component={(props) => ( <SetUpStanding   /> )} />\r\n              <Route path=\"/privateBankingPayment\" component={(props) => ( <PrivateBankingPayment  /> )} />\r\n              <Route path=\"/mobileTopup\" component={(props) => ( <MobileTopUp   /> )} />\r\n              <Route path=\"/directDebits\" component={(props) => ( <DirectDebit   /> )} />\r\n              <Route path=\"/futureDatedPayments\" component={(props) => ( <FutureDatedPayment   /> )} />\r\n              <Route path=\"/managePayees\" component={(props) => ( <ManagePayee   /> )} />\r\n            \r\n              \r\n              \r\n            </Switch>\r\n            \r\n            <Footer />\r\n\r\n        </div>\r\n    </BrowserRouter>\r\n    </TransactionProvider>\r\n    </HeaderProvider>\r\n    </GlobalProvider>\r\n    \r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\reportWebVitals.js",[],"F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Layout\\Home.js",["111","112","113"],"import './Home.css';\r\nimport React, { Component } from 'react'\r\n//import { ListGroup, Container } from 'react-bootstrap';\r\n//import Carousel from 'react-bootstrap/Carousel';\r\n//import SendMoney  from \"../Component/SendMoney\";\r\n//import 'bootstrap/dist/css/bootstrap.css';\r\nimport Header from \"../Common/Header/Header\";\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction HomeComponent(props) {\r\n    return (\r\n        <div className=\"Payments\">\r\n            <Header name={\"Payments\"} isBack={false}/>\r\n            <Operations />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n \r\nexport default HomeComponent;\r\n\r\nfunction Operations() {\r\n    return ( \r\n        \r\n        <div className=\"operations-outer\">\r\n            <div className=\"Operations\">\r\n                <ul className=\"Services\">\r\n                <li><a href=\"/sendMoney\"><i className='send-money'></i>Send Money or pay a bill<i className=' next'></i></a>  </li>\r\n                <li><a href=\"/transferMoney\"><i className='transfer-money'></i>Transfer between my accounts<i className=' next'></i></a></li>\r\n                <li><a href=\"/standingOrders\">Standing orders<i className='next'></i></a></li>\r\n                <li><a href=\"/managePayees\">Manage payees<i className='  next'></i></a></li>\r\n                <li><a href=\"/mobileTopup\">Mobile top up<i className=' next'></i></a></li>\r\n                <li><a href=\"/directDebits\">Direct debits<i className='  next'></i></a></li>\r\n                <li><a href=\"/futureDatedPayments\">Future dated payments<i className='  next'></i></a></li>\r\n                <li><a href=\"/privateBankingPayment\">Private banking payment<i className='  next'></i></a></li>\r\n                </ul> \r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\n\r\n/*\r\n\r\n<li><a href=\"/transferMoney\"><i className='fa fa-exchange fa-lg transfer-money'></i>Transfer between my accounts<i className='fa fa-angle-right next'></i></a></li>\r\n<li><a href=\"/standingOrders\">Standing orders<i className='fa fa-angle-right  next'></i></a></li>\r\n<li><a href=\"/managePayees\">Manage payees<i className='fa fa-angle-right  next'></i></a></li>\r\n<li><a href=\"/mobileTopup\">Mobile top up<i className='fa fa-angle-right next'></i></a></li>\r\n<li><a href=\"/directDebits\">Direct debits<i className='fa fa-angle-right  next'></i></a></li>\r\n<li><a href=\"/futureDatedPayments\">Future dated payments<i className='fa fa-angle-right  next'></i></a></li>\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass HomeComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            //name:\"Payments\",//\"Transfer Between\", //\"Send Money\",\r\n            //isBack: false            \r\n         }\r\n         \r\n        //this.props.setName('Payments')\r\n    }\r\n    render() { \r\n        return ( \r\n\r\n            <div className=\"Payments\">\r\n                <Header name={this.props.name} isBack={this.props.isBack}/>\r\n                <Operations />\r\n\r\n            </div>\r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default HomeComponent;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Context\\GlobalContext.js",[],"F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Context\\HeaderContext.js",["114"],"import React from 'react';\r\n\r\n\r\nconst HeaderContext = React.createContext();\r\n\r\nlet initialState = {\r\n    count: 10,\r\n    color: \"green\"\r\n}\r\n\r\nlet reducer = (state, action) => {\r\n\r\n    switch(action.type) {\r\n        case \"reset\":\r\n            return initialState;\r\n        case \"increment\":\r\n            return { ...state, count: state.count + 1 };\r\n        case \"decrement\":\r\n            return { ...state, count: state.count - 1 };\r\n        case \"set-color\":\r\n            return { ...state, color: action.payload };\r\n    }\r\n};\r\n\r\nfunction HeaderProvider(props) {\r\n    \r\n    let [state, dispatch] = React.useReducer( reducer, initialState );\r\n    let value = { state, dispatch };\r\n\r\n    return (\r\n        <HeaderContext.Provider value= {value}> { props.children } </HeaderContext.Provider>\r\n    );\r\n\r\n}\r\n\r\nlet HeaderConsumer = HeaderContext.Consumer;\r\n\r\n\r\nexport { HeaderProvider, HeaderConsumer, HeaderContext }","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Common\\Footer\\Footer.js",["115","116"],"\r\nimport React from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst Footer = (props) => {\r\n\r\n    let history = useHistory();\r\n    // history.goBack()\r\n    // history.push(path);\r\n\r\n    return ( \r\n        <div>\r\n            \r\n            <div className=\"container-fluid text-center\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-2\">\r\n                    <div>Left Sider</div>\r\n\r\n                </div>\r\n                <div className=\"col-md-8 \">\r\n                    Footer\r\n                </div>\r\n                <div className=\"col-md-2\">\r\n                <div>Right Sider</div>\r\n\r\n                </div>\r\n            </div>\r\n            </div>\r\n            \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Footer;","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Layout\\MyAppLayout.js",["117","118","119","120","121"],"import React, { useEffect, useState }from 'react';\r\nimport { BrowserRouter, Route, Switch, useHistory, useRouteMatch } from 'react-router-dom';\r\n\r\n\r\nimport { Layout, Menu, Breadcrumb, Switch as Switch1 } from 'antd';\r\nimport { DesktopOutlined, PieChartOutlined, FileOutlined, TeamOutlined, UserOutlined, HomeOutlined } from '@ant-design/icons';\r\n\r\nimport \"./MyAppLayout.css\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nvar siderLayoutArray = [\r\n    \"option1\", \"option2\", \"user\", \"team\", \"files\"\r\n]\r\n\r\nvar siderJson = {\r\n    option1: \"Option 1\", option2: \"Option 2\"\r\n}\r\n\r\nfunction MyAppLayout(){\r\n\r\n    const history = useHistory();\r\n    let { path, url } = useRouteMatch();\r\n\r\n    const[collapsed, setCollapsed] = useState(false);\r\n    var onCollapse = collapsed => {\r\n        console.log(collapsed);\r\n        setCollapsed(collapsed);\r\n    };\r\n    const[theme, setTheme] = useState('dark');\r\n    var changeTheme = value => {\r\n        value ? setTheme('dark') : setTheme('light');\r\n  };\r\n\r\n  const[location, setLocation] = useState(\"\");\r\n  useEffect(\r\n    ()=>{setLocation(history.location.pathname)}, [history.location.pathname]\r\n  );\r\n\r\n    return(\r\n        <Layout style={{ minHeight: '100vh' }} >\r\n            <Sider collapsible collapsed={collapsed} onCollapse={onCollapse} className={theme==='dark'? \"ant-layout-sider-dark\": \"ant-layout-sider-light\"}>\r\n                <div className=\"logo\" />\r\n                <Switch1  checked = { theme === \"dark\" } onChange = {changeTheme} checkedChildren= \"Dark\" unCheckedChildren= \"Light\"  />\r\n                <br />\r\n                <br />\r\n                <Menu theme = {theme} defaultSelectedKeys={['1']} mode=\"inline\">\r\n                    \r\n                    <Menu.Item key=\"1\" icon={<DesktopOutlined />} onClick={()=>{history.push(`${url}/option1`)}}>                  \r\n                    {/* <Menu.Item key=\"1\" icon={<PieChartOutlined />} onClick={()=>{history.push(`${url}/`+siderLayoutArray[0])}}>  */}\r\n                    {/* {siderJson[siderLayoutArray[0]]} */}\r\n                    Option 1\r\n                    </Menu.Item>\r\n                    {/* <Menu.Item key=\"2\" icon={<DesktopOutlined />} onClick={()=>{history.push(`${url}/option2`)}}> */}\r\n                    <Menu.Item key=\"2\" icon={<DesktopOutlined />} onClick={()=>{history.push(`${url}/option2`)}}>\r\n                    Option 2\r\n                    </Menu.Item>\r\n                    <SubMenu key=\"sub1\" icon={<UserOutlined /> } title=\"User\" >\r\n                        <Menu.Item key=\"3\" onClick={()=>{history.push(`${url}/user/tom`)}}>Tom</Menu.Item>\r\n                        <Menu.Item key=\"4\" onClick={()=>{history.push(`${url}/user/bill`)}}>Bill</Menu.Item>\r\n                        <Menu.Item key=\"5\" onClick={()=>{history.push(`${url}/user/alex`)}}>Alex</Menu.Item>\r\n                    </SubMenu>\r\n                    <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Team\">\r\n                        <Menu.Item key=\"6\" onClick={()=>{history.push(`${url}/team/team1`)}}>Team 1</Menu.Item>\r\n                        <Menu.Item key=\"8\" onClick={()=>{history.push(`${url}/team/team2`)}}>Team 2</Menu.Item>\r\n                    </SubMenu>\r\n                    <Menu.Item key=\"9\" icon={<FileOutlined />} onClick={()=>{history.push(`${url}/files`)}}>\r\n                    Files   \r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n            <Layout className=\"site-layout\">\r\n            <Header className=\"site-layout-background\" style={{ padding: 0 }} />\r\n            <Content style={{ margin: '0 16px' }}>\r\n                <Breadcrumb style={{ margin: '16px 0' }}>\r\n\r\n                    <Breadcrumb.Item href=\"/\">\r\n                        <HomeOutlined /> \r\n                    </Breadcrumb.Item>                    \r\n\r\n                    <Breadcrumb.Item><a href=\"/myAppLayout\">MyAppLayout</a></Breadcrumb.Item> \r\n\r\n                    {                        \r\n                        location.includes(\"user\") ? \r\n                            <Breadcrumb.Item><a onClick={()=>history.go(\"/myAppLayout/user\")}>User</a></Breadcrumb.Item>  : null                                \r\n                    }\r\n                    {\r\n                        location.includes(\"tom\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/user/tom\">Tom</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    {\r\n                        location.includes(\"alex\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/user/alex\">Alex</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    {\r\n                        location.includes(\"bill\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/user/bill\">Bill</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    {\r\n                        location.includes(\"option1\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/option1\">Option1</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    {\r\n                        location.includes(\"option2\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/option2\">Option2</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    {\r\n                        location.includes(\"team\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/team\">Team</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    {\r\n                        location.includes(\"team1\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/team/team1\">Team1</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    {\r\n                        location.includes(\"team2\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/team/team2\">Team2</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    {\r\n                        location.includes(\"files\") ? \r\n                            <Breadcrumb.Item><a href=\"/myAppLayout/files\">Files</a></Breadcrumb.Item>  : null\r\n                    }\r\n                    \r\n                </Breadcrumb>\r\n                <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n                <Switch>\r\n                    <Route exact path={path}>\r\n                    </Route>\r\n                    <Route path={`${path}/option1`}>\r\n                        <div>\r\n                        Option1    \r\n                        </div>\r\n                    </Route>\r\n                    <Route path={`${path}/option2`}>\r\n                        <div>\r\n                        Option2    \r\n                        </div>\r\n                    </Route>\r\n                    <Route path={`${path}/files`}>\r\n                        <div>\r\n                            Files    \r\n                        </div>\r\n                    </Route>\r\n                    <Route path={`${path}/user`}>\r\n                        <div>\r\n                            <h3>Option3 Users</h3>\r\n                            <Switch>\r\n                                <Route exact path={path}>\r\n                                </Route>\r\n                                <Route path={`${path}/user/tom`}>\r\n                                    <div>\r\n                                        Hello Tom\r\n                                    </div>\r\n                                </Route>\r\n                                <Route path={`${path}/user/bill`}>\r\n                                    <div>\r\n                                        Hello Bill\r\n                                    </div>\r\n                                </Route>\r\n                                <Route path={`${path}/user/alex`}>\r\n                                    <div>\r\n                                        Hello Alex\r\n                                    </div>\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </Route>\r\n                    <Route path={`${path}/team`}>\r\n                        <div>\r\n                            <h3>Option4 Teams</h3>\r\n                            <Switch>\r\n                                <Route exact path={path}>\r\n                                </Route>\r\n                                <Route path={`${path}/team/team1`}>\r\n                                    <div>\r\n                                        Hello Team1\r\n                                    </div>\r\n                                </Route>\r\n                                <Route path={`${path}/team/team2`}>\r\n                                    <div>\r\n                                        Hello Team2\r\n                                    </div>\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </Route>\r\n                </Switch>\r\n                </div>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>Ant Design Layout Footer</Footer>\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n}\r\n\r\n\r\nexport default MyAppLayout;","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\TransferMoney\\TransferMoney.js",[],"F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\SetUpStanding\\SetUpStanding.js",["122","123","124","125","126","127"],"import React, {useEffect, useState, useContext } from 'react';\r\nimport Header from \"../../Common/Header/Header\";\r\n\r\n\r\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { GlobalContext } from \"../../Context/GlobalContext\";\r\nimport \"./SetUpStanding.css\";\r\n\r\n\r\nfunction SetUpStanding(props) {\r\n    return(\r\n        <div>\r\n            <Header name={'Set up Standing...'} isBack={true}/>\r\n            <SetUpStandingBody />\r\n        \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nfunction SetUpStandingBody(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n    let match = useRouteMatch();\r\n\r\n    const [value,setValue] = useState('');\r\n    const handleSelect= (e) =>{\r\n      setValue(e)\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Send\">\r\n            <div className=\"set-up-standing-title\">\r\n                <div>\r\n                    <p className=\"time-info\">\r\n                    <i className=\"fa fa-clock-o\" ></i>&nbsp; \r\n                        It takes a minimum of \r\n                        <span className=\"info-middle\"><strong> 1 working day to </strong></span>\r\n                        set up your standing order.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"set-up-standing-order-body\">\r\n                <ul>\r\n                <label > Your Account </label>\r\n                <div className=\"account-info\">\r\n                You can set up a standing order online from your current account to another account in the same country.\r\n                </div>\r\n                <div className=\"pay-from\">\r\n                    <strong className=\"pay-from-text\">Pay from</strong>\r\n                </div>\r\n                <select onChange={(event) => handleSelect(event.target.value)}>\r\n                    <option value=\"\">Select an account</option>\r\n                    {\r\n                        globalContext.Global.Accounts.map(i => (\r\n                            <option value={i.id} key={i.id}>{i.type} - {i.name}</option>\r\n                        ))\r\n                    }\r\n                </select>\r\n\r\n\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default SetUpStanding;","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\PrivateBankingPayment\\PrivateBankingPayment.js",["128","129","130","131","132","133","134","135"],"import React, {useEffect, useState, useContext } from 'react';\r\n\r\nimport Header from \"../../Common/Header/Header\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { GlobalContext } from \"../../Context/GlobalContext\";\r\nimport './PrivateBankingPayment.css';\r\n\r\n\r\nfunction PrivateBankingPayment(props) {\r\n    return(\r\n        <div>\r\n            <Header name={'Private Banking Payment'} isBack={true}/>\r\n            <PrivateBankingPaymentBody />\r\n        \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nfunction PrivateBankingPaymentBody(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n    let match = useRouteMatch();\r\n    \r\n    let history = useHistory();\r\n\r\n    const [value,setValue] = useState('');\r\n    const handleSelect= (e) =>{\r\n      setValue(e)\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Send\">\r\n            <div className=\"private-banking-title\">\r\n                <div>\r\n                    <div  className=\"text-center\">\r\n                    <i className=\"private-logo\" >\r\n                    </i>\r\n                    </div>\r\n\r\n                    <p className=\"top-message\">\r\n                        If your payment cannot be made on 365 online you cannot make a separate payment throu the req payment option below\r\n                    </p>\r\n                    <p className=\"font-weight-bold\">\r\n                        when for example:\r\n                    </p>\r\n                    <ul className=\"borderless\">\r\n                        <li>Amount exceeded the 365 total working day limit.</li>\r\n                        <li>You want to send money to courriers or in currencies that are not included in 365 online.</li>\r\n                        <li>You want to send money from currency account in global market.</li>\r\n                    </ul>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"private-banking-note\">\r\n                <p>Please Note:</p>\r\n                <ul className=\"borderless\">\r\n                    <li>Amount exceeded the 365 total working day limit.</li>\r\n                    <li>You want to send money to courriers or in currencies that are not included in 365 online.</li>\r\n                    <li>You want to send money from currency account in global market.</li>\r\n                    <li>You want to send money to courriers or in currencies that are not included in 365 online.</li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"private-banking-footer\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <button class=\"go-back-button\" onClick={() => history.goBack()}>Go back</button>\r\n                    <button class=\"req-payment-button\">Request payment</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PrivateBankingPayment;","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\StandingOrder\\StandingOrder.js",["136","137","138","139","140","141"],"import React, {useEffect, useState, useContext } from 'react';\r\nimport Header from \"../../Common/Header/Header\";\r\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport './StandingOrder.css'\r\n\r\nimport { GlobalContext } from \"../../Context/GlobalContext\";\r\n\r\nfunction StandingOrder(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n    let match = useRouteMatch();\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        //props.setName('Send Money');\r\n    })\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"Payments\">\r\n            <Header name={'Standing Orders'} isBack={true}/>\r\n            <StandingOrderBody />\r\n\r\n            {/* <Switch>\r\n                <Route path={`${match.url}/setUpNewOrder`}>\r\n                    <SetUpStanding />\r\n                </Route>\r\n            </Switch> */}\r\n\r\n        </div>\r\n\r\n     );\r\n}\r\n\r\n\r\n\r\nfunction StandingOrderBody(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n    let match = useRouteMatch();\r\n\r\n    const [value,setValue] = useState('');\r\n    const handleSelect= (e) =>{\r\n      setValue(e)\r\n    }\r\n\r\n    return(\r\n        <div className=\"Send\">\r\n           <div className=\"standing-order-title\">\r\n                <p>To view your standing orders select an account</p>\r\n            </div>\r\n            <div className=\"standing-order-body\">\r\n                <ul>\r\n                <label >Account </label>\r\n                <select onChange={(event) => handleSelect(event.target.value)}>\r\n                    <option value=\"\">Select account</option>\r\n                    {\r\n                        globalContext.Global.Accounts.map(i => (\r\n                            <option value={i.id} key={i.id}>{i.name}</option>\r\n                        ))\r\n                    }\r\n                </select>\r\n\r\n                <p className=\"standing-order-or\"><span>Or</span></p>\r\n\r\n                <div className=\"set-up-button\">\r\n                    <button ><Link to={\"/setUpNewOrder\"}><i className=\"plus-logo\"></i><div>Set up new standing order</div></Link></button>\r\n                </div>\r\n\r\n                <div className=\"info-msg\">\r\n                    <span className=\"info-logo\">\r\n                    </span>\r\n                    <div>\r\n                        <p className=\"info-msg-text\">\r\n                            Standing order can be set up online to transfer funds from your current account to another account in the same country. (max limit €3,000 / £3,000).\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default StandingOrder;\r\n","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\SendMoney\\SendMoney.js",["142","143"],"import React, {useEffect, useState, useContext } from 'react';\r\nimport Header from \"./../../Common/Header/Header\";\r\n\r\nimport './SendMoney.css'\r\n\r\nimport { GlobalContext } from \"./../../Context/GlobalContext\";\r\n\r\nimport { HeaderContext } from \"./../../Context/HeaderContext\";\r\n\r\nfunction SendMoney(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n\r\n    let { state, dispatch } = useContext(HeaderContext);\r\n\r\n    let inc = () => dispatch({ type: \"increment\" });\r\n\r\n\r\n    useEffect(()=>{\r\n        //props.setName('Send Money');\r\n    })\r\n    \r\n\r\n    return ( \r\n        \r\n        <div className=\"Payments\">\r\n            <Header name={'Send Money'} isBack={true}/>\r\n            <SendBody />\r\n\r\n            {state.color}\r\n            <p>\r\n            Current count: <b>{state.count}</b>\r\n            </p>\r\n            <button onClick={inc}>Increment!</button>\r\n\r\n\r\n            {\r\n            /* <GlobalConsumer>\r\n                {\r\n                    (accounts)=>{\r\n                        return <div>Acc {accounts.length}</div>\r\n                    }\r\n                }\r\n            </GlobalConsumer> \r\n            Acc length {globalContext.Global.Accounts.length}// works syntax\r\n            <SendBody {...props} />\r\n            */\r\n            }\r\n            \r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default SendMoney;\r\n\r\n\r\nfunction SendBody(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n\r\n    \r\n    const [value,setValue] = useState('');\r\n    const handleSelect= (e) =>{\r\n      setValue(e)\r\n    }\r\n\r\n    return(\r\n        <div className=\"Send\">\r\n            <div className=\"SendHeader\">\r\n                <p>Pay from</p>\r\n                <ul>\r\n                <label >Account </label>\r\n                <select onChange={(event) => handleSelect(event.target.value)}>\r\n                    <option value=\"\">Select account</option>\r\n                    {\r\n                        globalContext.Global.Accounts.map(i => (\r\n                            <option value={i.id} key={i.id}>{i.name}</option>\r\n                        ))\r\n                    }\r\n                </select>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\ManagePayee\\ManagePayee.js",["144","145"],"import React, {useEffect, useState, useContext } from 'react';\r\nimport Header from \"../../Common/Header/Header\";\r\n\r\nimport './../SendMoney/SendMoney.css'\r\n\r\nimport { GlobalContext } from \"../../Context/GlobalContext\";\r\n\r\nimport { HeaderContext } from \"../../Context/HeaderContext\";\r\n\r\nfunction ManagePayee(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n\r\n    let { state, dispatch } = useContext(HeaderContext);\r\n\r\n    let inc = () => dispatch({ type: \"increment\" });\r\n\r\n\r\n    useEffect(()=>{\r\n        //props.setName('Send Money');\r\n    })\r\n    \r\n\r\n    return ( \r\n        \r\n        <div className=\"Payments\">\r\n            <Header name={'Manage Payee'} isBack={true}/>\r\n\r\n            {state.color}\r\n            <p>\r\n            Current count: <b>{state.count}</b>\r\n            </p>\r\n            <button onClick={inc}>Increment!</button>\r\n\r\n\r\n            \r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default ManagePayee;\r\n\r\n","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\MobileTopUp\\MobileTopUp.js",["146","147"],"import React, {useEffect, useState, useContext } from 'react';\r\nimport Header from \"../../Common/Header/Header\";\r\n\r\nimport './../SendMoney/SendMoney.css'\r\n\r\nimport { GlobalContext } from \"../../Context/GlobalContext\";\r\n\r\nfunction MobileTopUp(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n\r\n\r\n    useEffect(()=>{\r\n        //props.setName('Send Money');\r\n    })\r\n    \r\n\r\n    return ( \r\n        \r\n        <div className=\"Payments\">\r\n            <Header name={'Mobile Top Up'} isBack={true}/>\r\n            <MobileTopUpBody />\r\n            {\r\n            /* <GlobalConsumer>\r\n                {\r\n                    (accounts)=>{\r\n                        return <div>Acc {accounts.length}</div>\r\n                    }\r\n                }\r\n            </GlobalConsumer> \r\n            Acc length {globalContext.Global.Accounts.length}// works syntax\r\n            <SendBody {...props} />\r\n            */\r\n            }\r\n            \r\n        </div>\r\n\r\n     );\r\n}\r\n \r\n\r\n\r\nfunction MobileTopUpBody(props) {\r\n\r\n    const globalContext = useContext(GlobalContext);\r\n\r\n\r\n    const [value,setValue] = useState('');\r\n    const handleSelect= (e) =>{\r\n      setValue(e)\r\n    }\r\n\r\n    return(\r\n        <div className=\"Send\">\r\n            <div className=\"SendHeader\">\r\n                <p>Pay from</p>\r\n                <ul>\r\n                <label ><strong>Account</strong> </label>\r\n                <select onChange={(event) => handleSelect(event.target.value)}>\r\n                    <option value=\"\">Select account</option>\r\n                    {\r\n                        globalContext.Global.Accounts.map(i => (\r\n                            <option value={i.id} key={i.id}>{i.type} - {i.name}</option>\r\n                        ))\r\n                    }\r\n                </select>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default MobileTopUp;\r\n","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\DirectDebit\\DirectDebit.js",["148","149","150","151","152","153","154","155","156","157","158"],"import React, {useEffect, useState, useContext } from 'react';\r\nimport Header from \"../../Common/Header/Header\";\r\nimport { Accordion, Card, Button } from 'react-bootstrap'\r\n\r\n\r\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { GlobalContext } from \"../../Context/GlobalContext\";\r\nimport \"./DirectDebit.css\";\r\n\r\n\r\nfunction DirectDebit(props) {\r\n\r\n\r\n    \r\n    return(\r\n        <div className=\"Payments\">\r\n            <Header name={'SEPA Direct Debit Services'} isBack={true}/>\r\n            <DirectDebitBody />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction DirectDebitBody(props) {\r\n    return(\r\n        <div>\r\n            <div className=\"top-heading\">\r\n                <div className=\"help-info\">\r\n                    <p><i className=\"fa fa-question\"></i>\r\n                        Need a hand?\r\n                    </p>\r\n                </div>                \r\n                <div className=\"next-arrow\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                </div>\r\n            </div>  \r\n            <div className=\"Send\">\r\n                <AccordionList />\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction chgStyle(e) {\r\n    //console.log(\"clikkk chg\" +e.target.classList);\r\n\r\n\r\n    if(e.target.classList.contains(\"card-header\")){\r\n        e.target.classList.remove(\"card-header\");\r\n        e.target.classList.add(\"new-card-header\");\r\n    }else{\r\n        e.target.classList.remove(\"new-card-header\");\r\n        e.target.classList.add(\"card-header\");        \r\n    }\r\n    \r\n    \r\n}\r\n\r\nfunction AccordionList(props) {\r\n\r\n    \r\n\r\n    const [Accordion,setAccordion] = useState(\r\n        [\r\n            {\r\n                \"id\":\"0\",\r\n                \"title\":\"Cancel direct debit mandate\",\r\n                \"body\":\"\"\r\n            },\r\n            {\r\n                \"id\":\"1\",\r\n                \"title\":\"Refuse next/all direct debits\",\r\n                \"body\":\"\"\r\n            },\r\n            {\r\n                \"id\":\"2\",\r\n                \"title\":\"Reactivate next/all direct debits\",\r\n                \"body\":\"\"\r\n            },\r\n            {\r\n                \"id\":\"3\",\r\n                \"title\":\"block/unblock direct debits\",\r\n                \"body\":\"\"\r\n            }\r\n        ]\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            {Accordion.map(i=>{\r\n                return(\r\n                    <Accord key={i.id} id={i.id} title={i.title} body={getBodies(i.id)} />\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Accord({id, title, body}) {\r\n    return(\r\n        <div key={id}>\r\n            <Accordion defaultActiveKey=\"\">\r\n                <Card >\r\n                    <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={id} onClick={(e)=>chgStyle(e)}>\r\n                    {title}\r\n                    </Accordion.Toggle>\r\n\r\n                    <Accordion.Collapse eventKey={id}>\r\n                        <Card.Body>\r\n                            {\r\n                                \r\n                                body //getBodies(id) // id == \"0\" ? <Body1/>: id == \"1\" ? <Body2/>: id == \"2\" ? <Body3/>: <Body4/>   \r\n                                                         \r\n                            }\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DirectDebit;\r\n\r\n\r\n// just binds Accord Body with respective Accord Card header id\r\n//id == \"0\" ? <Body1/>: id == \"1\" ? <Body2/>: id == \"2\" ? <Body3/>: <Body4/>\r\nfunction getBodies(id) {\r\n\r\n    if(id===\"0\")\r\n        return <Body1 />\r\n    else if(id===\"1\")\r\n        return <Body2 />    \r\n    else if(id===\"2\")\r\n        return <Body3 />\r\n    else if(id===\"3\")\r\n        return <Body4 />   \r\n    else\r\n        return \"ERR!!! BODY DOENT EXIST LETS CREATE NEW BODY\"\r\n\r\n}\r\n\r\nfunction Body1(props) {\r\n    return(\r\n        <div>\r\n            <div className=\"body-1\">\r\n                <p>\r\n                 <span><i className=\"fa fa-check\" style={{color:\"blue\",paddingRight: '1%'}}></i></span>\r\n\t\t\t\t <span>This means the bank will permenantly cancel all SEPA direct debit payments for this mandate.</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n                  <span><i className=\"fa fa-check\" style={{color:\"blue\",paddingRight: '1%'}}></i></span>\r\n\t\t\t\t  <span>Once this request is processed it cannot be reversed.</span>\r\n\t\t\t    </p>\r\n\t\t\t    <p>\r\n                  <span><i className=\"fa fa-check\" style={{color:\"blue\",paddingRight: '1%'}}></i></span>\r\n\t\t\t\t  <span>You need to submit your request by 3pm, one working day before the next payment is due.</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t\r\n\t\t\t\t<h6>Request form...</h6>\r\n\t\t\t    <h6 style={{color:\"blue\"}}>You'll need:</h6>\r\n\t\t\t\t\r\n\t\t\t\t<p><i className=\"fa fa-check-circle\" style={{color:\"blue\",paddingRight: '1%'}}></i>\r\n\t\t\t\t   Creditor name and ID\r\n\t\t\t\t   <a href=\"#\" style={{float:\"right\"}}><em><u>What is a creditor ID?</u></em></a></p>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t    <p><i className=\"fa fa-check-circle\" style={{color:\"blue\", paddingRight: '1%'}}></i>\r\n\t\t\t\tUnique mandate reference (UMR)\r\n\t\t\t\t<a href=\"#\" style={{float:\"right\"}}><em><u>Where's my UMR?</u></em></a></p>\r\n\t\t\t\t\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <button className=\"req-payment-button\">Continue</button>\r\n                </div>\r\n\t\t\t\r\n              </div>\r\n        </div>\r\n    )\r\n}\r\nfunction Body2(props) {\r\n    return(\r\n        <div>\r\n            <div className=\"body-2\">\r\n                <p>Make a selection</p>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <button className=\"\" style={{width:\"40%\"}}>Refuse Next</button>\r\n                    <button className=\"\" style={{width:\"40%\"}}>Refuse All</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nfunction Body3(props) {\r\n    return(\r\n        <div>\r\n            <div className=\"body-3\">\r\n                <p>Body 3</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nfunction Body4(props) {\r\n    return(\r\n        <div>\r\n            <div className=\"body-4\">\r\n                <p>Make a selection</p>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <button className=\"\" style={{width:\"40%\"}}>Block</button>\r\n                    <button className=\"\" style={{width:\"40%\"}}>Unblock</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n// function AccordionList(props) {\r\n//     return(\r\n//         <div>  \r\n//             <Accordion defaultActiveKey=\"\">\r\n//                 <Card>\r\n//                 {/* <Card.Header className=\"\"> */}\r\n//                     <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\" onClick={(e)=>chgStyle(e)}>\r\n//                     Cancel direct debit mandate\r\n//                     </Accordion.Toggle>\r\n//                 {/* </Card.Header> */}\r\n\r\n//                 <Accordion.Collapse eventKey=\"0\">\r\n//                     <Card.Body>Body content for panel 1</Card.Body>\r\n//                 </Accordion.Collapse>\r\n//                 </Card>\r\n//             </Accordion>\r\n\r\n//             <Accordion defaultActiveKey=\"\">\r\n//                 <Card >\r\n//                 {/* <Card.Header className=\"\"> */}\r\n//                     <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"1\" onClick={(e)=>chgStyle(e)}>\r\n//                     Refuse next/all direct debits\r\n//                     </Accordion.Toggle>\r\n//                 {/* </Card.Header> */}\r\n\r\n//                 <Accordion.Collapse eventKey=\"1\">\r\n//                     <Card.Body>Body content for panel 2</Card.Body>\r\n//                 </Accordion.Collapse>\r\n//                 </Card>\r\n//             </Accordion>\r\n\r\n\r\n//         </div>\r\n//     )\r\n// }","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\FutureDatedPayment\\FutureDatedPayment.js",["159","160"],"import React, {useEffect, useState, useContext } from 'react';\r\nimport Header from \"../../Common/Header/Header\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport './FutureDatedPayment.css'\r\n\r\nimport { GlobalContext } from \"../../Context/GlobalContext\";\r\n\r\n\r\n\r\n\r\nfunction FutureDatedPayment(props) {\r\n    return(\r\n        <div>\r\n            <Header name={'Future Dated Payments'} isBack={true}/>\r\n            <FutureDatedPaymentBody />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction FutureDatedPaymentBody(props) {\r\n\r\n    \r\n    const globalContext = useContext(GlobalContext);\r\n    let transactions = globalContext.Global.Accounts[0].transactions // take transactions arr for account 1\r\n\r\n    \r\n\r\n    return(\r\n        <div className=\"Send\">\r\n            <div className=\"d-flex justify-content-around\">\r\n                \r\n                <Table striped borderless hover className=\"payment-table \">\r\n                    <thead>\r\n                        <tr>\r\n                        {/* <th>#</th> */}\r\n                        <th>Status</th>\r\n                        <th>Payee Name</th>\r\n                        <th>Amount</th>\r\n                        <th>Due Date</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {   \r\n                        transactions.map(i=>{\r\n                            return(                                \r\n                                <tr key={i.id}>\r\n                                    {/* <td>{i.id}</td> */}\r\n                                    <td className={getStyleStatus(i.status)}>\r\n                                        {i.status}\r\n                                    </td>\r\n                                    <td>{i.payee_name}</td>\r\n                                    <td className=\"text-center\">{i.amount}</td>\r\n                                    <td>{i.due_date}</td>\r\n                                </tr>                                \r\n                            )\r\n                        })\r\n                    }\r\n                    </tbody>\r\n                </Table>\r\n                \r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// working of this function depends on JSON transaction status data should match\r\nfunction getStyleStatus(status) {\r\n    if(status===\"PENDING\")\r\n        return \"payment-pending-status\"\r\n    else if(status===\"UNSUCCESSFUL\")\r\n        return \"payment-unsuccess-status\"    \r\n    else if(status===\"SUCCESSFUL\")\r\n        return \"payment-success-status\"  \r\n    else if(status===\"CANCELLED\")\r\n        return \"payment-cancel-status\"\r\n    return \"\"          \r\n}\r\n\r\nexport default FutureDatedPayment;","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Layout\\MyApp.js",["161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184"],"import React, { useContext, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { useState } from 'react';\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport ToastHeader from 'react-bootstrap/ToastHeader';\r\nimport ToastBody from 'react-bootstrap/ToastBody';\r\n\r\nimport Table from 'react-bootstrap/Table'\r\n// import Form from 'react-bootstrap/Form'\r\n\r\n//Adding antd modules and style\r\nimport { Button as Button1, Modal, Form, Input, Radio, Dropdown, Menu, Select, Checkbox  } from 'antd';\r\nimport \"antd/dist/antd.css\";\r\nimport { DownOutlined, UserOutlined, DeleteOutlined } from '@ant-design/icons';\r\n\r\nimport { TransactionContext, getAccounts, setAccount, deleteAccount, putAccount, getAccount, getTransactions, setTransaction } from \"../Context/TransactionContext\";\r\n\r\nimport { BrowserRouter, Route, Switch, useRouteMatch, useHistory, useParams } from 'react-router-dom';\r\n\r\n\r\nimport AddedSuccess from \"../Component/Success/AddedSuccess\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    text: {\r\n      padding: theme.spacing(2, 2, 0),\r\n    },\r\n    paper: {\r\n      paddingBottom: 50,\r\n    },\r\n    list: {\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    subheader: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  }));\r\n\r\n  const messages = [\r\n    {\r\n      id: 1,\r\n      primary: 'Brunch this week?',\r\n      secondary: \"I'll be in the neighbourhood this week. Let's grab a bite to eat\",\r\n      person: '/static/images/avatar/5.jpg',\r\n    },\r\n    {\r\n      id: 2,\r\n      primary: 'Birthday Gift',\r\n      secondary: `Do you have a suggestion for a good present for John on his work\r\n        anniversary. I am really confused & would love your thoughts on it.`,\r\n      person: '/static/images/avatar/1.jpg',\r\n    },\r\n    {\r\n      id: 3,\r\n      primary: 'Recipe to try',\r\n      secondary: 'I am try out this new BBQ recipe, I think this might be amazing',\r\n      person: '/static/images/avatar/2.jpg',\r\n    },\r\n    {\r\n      id: 4,\r\n      primary: 'Yes!',\r\n      secondary: 'I have the tickets to the ReactConf for this year.',\r\n      person: '/static/images/avatar/3.jpg',\r\n    },\r\n    {\r\n      id: 5,\r\n      primary: \"Doctor's Appointment\",\r\n      secondary: 'My appointment for the doctor was rescheduled for next Saturday.',\r\n      person: '/static/images/avatar/4.jpg',\r\n    },\r\n    {\r\n      id: 6,\r\n      primary: 'Discussion',\r\n      secondary: `Menus that are generated by the bottom app bar (such as a bottom\r\n        navigation drawer or overflow menu) open as bottom sheets at a higher elevation\r\n        than the bar.`,\r\n      person: '/static/images/avatar/5.jpg',\r\n    },\r\n    {\r\n      id: 7,\r\n      primary: 'Summer BBQ',\r\n      secondary: `Who wants to have a cookout this weekend? I just got some furniture\r\n        for my backyard and would love to fire up the grill.`,\r\n      person: '/static/images/avatar/1.jpg',\r\n    },\r\n  ];\r\n\r\n\r\n\r\n// TODO: jsPanel\r\nfunction MyAppComponent(props) {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* text-center */}\r\n            <div className=\"container-fluid \"> \r\n                <div className=\"row\">\r\n                    \r\n                    <div className=\"col-md-2\">\r\n                        <LeftSider />\r\n\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n\r\n                        <MyAppBody />\r\n\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                        <RightSider />\r\n\r\n                    </div>\r\n\r\n{/* \r\n<TransactionCheck /> here\r\n\r\n*/}\r\n\r\n                    \r\n\r\n\r\n                    \r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction TransactionCheck(props) {\r\n\r\n\r\n  let { transactionstate, transactiondispatch } = useContext(TransactionContext);\r\n  const history = useHistory();\r\n  let { path, url } = useRouteMatch();\r\n  const { accountId } = useParams();\r\n\r\n  const getAccountData = async ()=> {\r\n    await getAccounts(transactiondispatch);\r\n  }\r\n\r\n  const getTransactionData = async () => {\r\n    await getTransactions(transactiondispatch)\r\n  }\r\n\r\n\r\n  let status = () => \r\n      transactiondispatch({ \r\n        type: \"ADD_CONTACT\",\r\n        payload: { id: Math.floor(Math.random() * 100), name: \"newName\", email: \"newEmail\" } \r\n      });\r\n\r\n\r\n\r\n  const Testing = () => {\r\n\r\n    let addTransaction = () => transactiondispatch({\r\n      type: \"add-transaction\",\r\n      payload: { id:\"0\", status:\"PENDING\", payee_name:\"abcd\", amount:1000.00, due_date:\"10/10/2020\", type:\"DEBITED\" }\r\n    });  \r\n    \r\n    let addAccTransaction = () => transactiondispatch({\r\n      type: \"add-account-transaction\",\r\n      payload: {\r\n        accountID: \"1\",\r\n        transaction: { id:\"0\", status:\"PENDING\", payee_name:\"abcd\", amount:1000.00, due_date:\"10/10/2020\", type:\"DEBITED\" }\r\n      }\r\n    })\r\n\r\n\r\n    return(\r\n      <div>\r\n        <button onClick={getAccountData}>Call axios getAccountData</button>\r\n        <button onClick={getTransactionData}>Call axios getTransactionData</button>\r\n        <button onClick={addTransaction}>Add New Dummy Transactions</button>\r\n        <button onClick={addAccTransaction}>Add New Dummy Acc Transactions</button>\r\n        <p>Accounts.length: { transactionstate.Accounts != null ? transactionstate.Accounts.length : 0 }</p>\r\n        <p>Tranctions.length: { transactionstate.Accounts.map(t=>t.transactions != null ? t.transactions.length : 0 )}</p>\r\n          \r\n        <p><h5>transactionstate.transactions</h5>\r\n          {transactionstate.transactions.map(t=>\r\n          <div>\r\n            amount is <b>{t.amount}</b> accountid is <b>{t.accountid}</b> payee_name is <b>{t.payee_name}</b> {/* status is {t.status} due_date is {t.due_date} type is {t.type}*/}\r\n          </div>         \r\n          )}\r\n        </p>\r\n          <div>\r\n            <h5>transactionstate.transactions.length:</h5> {transactionstate.transactions.length}\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return(\r\n\r\n  <div>\r\n      <button onClick={()=>{history.push(`${url}/testing`)}}>Testing</button>\r\n      \r\n      <button onClick={()=>{history.push(`${url}/addNewAccount`)}}>Add New Account</button>\r\n      <button onClick={()=>{history.push(`${url}/userTable`)}}>User Table</button>\r\n      <button onClick={()=>{history.push(`${url}/accountTable`)}}>Account Table</button>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path={path}>\r\n          </Route>\r\n          <Route path={`${path}/testing`}>\r\n            <div>\r\n              <Testing />      \r\n            </div>\r\n          </Route>\r\n          <Route path={`${path}/addNewAccount`}>\r\n            <div>\r\n              <AddNewUser />      \r\n            </div>\r\n          </Route>\r\n          <Route path={`${path}/userTable`}>\r\n            <TransactionUserTable user={transactionstate.contacts}/>\r\n          </Route>\r\n          <Route path={`${path}/accountTable`}>\r\n            <TransactionAccountTable user={transactionstate.Accounts}/>\r\n          </Route>\r\n          <Route path={`${path}/account/:accountId`} component={SingleAccount} />\r\n        </Switch>\r\n      </div>\r\n\r\n      {/* \r\n      \r\n        <p>contacts length is: {state.contacts.length}</p>   \r\n        <h3>\r\n          contacts name is {state.contacts.map(c=>c.name)}\r\n        </h3>  \r\n      \r\n      */}\r\n      \r\n      \r\n  </div> \r\n\r\n  )\r\n}\r\n\r\nfunction SingleAccount(props) {\r\n\r\n  const { accountId } =  useParams(); // got the clicked single Account id -> used in json call or data\r\n  let { transactionstate, transactiondispatch } = useContext(TransactionContext);\r\n  \r\n  const [account, setAccount] = useState(null);\r\n  const amount = 1000;\r\n\r\n  useEffect(\r\n    async ()=> {\r\n      setAccount(await getAccount(transactiondispatch, accountId))\r\n      console.log(account)\r\n    },\r\n    [] // to get call only once\r\n  ) // fetch values from heroku, current context has only 1 Account value in initialState\r\n\r\n\r\n  // 1st get value for current account thro useEffect -> collect old transaction in temp array -> .push new transaction -> PUT and update whole Account json data\r\n  const putAccountData = async (values)=> {\r\n    \r\n    const newTransationArr = account.transactions; // useEffect hook helps to fetch values for current selected accountId\r\n    \r\n    newTransationArr.push({\r\n      id: Math.floor(Math.random() * 100), status: \"SUCCESS\", payee_name: values.name, amount: values.amount, type: values.type \r\n    });\r\n\r\n    await putAccount(transactiondispatch,\r\n      {\r\n        id: account.id, name: account.name,  balance: account.balance + values.amount, type: account.type, linked_accounts: [], \r\n        transactions: newTransationArr\r\n      }\r\n    );\r\n  }\r\n\r\n  const setTransactionData = async (values) => {\r\n    await setTransaction(transactiondispatch,\r\n        {\r\n          id: Math.floor(Math.random() * 100), accountid: accountId, status: \"SUCCESS\", payee_name: values.name, amount: values.amount, type: values.type \r\n        }\r\n      )\r\n  }\r\n\r\n  const formRef = React.createRef();\r\n\r\n  const { Option } = Select;\r\n\r\n  var onFinish = values => {\r\n    putAccountData(values);       // put json inside account's transaction -> you need update transaction part only\r\n    setTransactionData(values);   // post transaction json -> every tranasction post inside it (array)\r\n  };\r\n\r\n  var onReset = () => {\r\n    formRef.current.resetFields();\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 8\r\n    },\r\n    wrapperCol: {\r\n      span: 16\r\n    }\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 8,\r\n      span: 16\r\n    }\r\n  };\r\n\r\n  return(\r\n    <div>\r\n      Account {accountId} {console.log(account)}\r\n      { account != null ? <div>id: {account.id} name: {account.name}</div> : null }\r\n      {/* { account != null ? <button onClick={putAccountData} > Credit {amount}</button> : null } */}\r\n      { account != null ? \r\n      <div>\r\n        <Form {...layout}\r\n          ref={formRef}\r\n          name=\"control-ref\"\r\n          onFinish={onFinish}\r\n        >\r\n          <Form.Item\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Please input your Name!'\r\n              }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item name=\"type\" label=\"Transaction Type\" rules={[{ required: true,},]} >\r\n            <Select\r\n              placeholder=\"Select Your Transaction Type\"\r\n              //onChange={onAccountTypeChange}\r\n              allowClear\r\n            >\r\n              <Option value=\"CREDITED\">CREDITED</Option>\r\n              <Option value=\"DEBITED\">DEBITED</Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"amount\" label=\"Amount\" rules={[{ required: true,},]} >\r\n            <Select\r\n              placeholder=\"Select Your Amount\"\r\n              //onChange={onAccountTypeChange}\r\n              allowClear\r\n            >\r\n              <Option value={100}> 100 </Option>\r\n              <Option value={500}> 500 </Option>\r\n              <Option value={2000}> 2000 </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item {...tailLayout}>\r\n            <Button1 type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button1>\r\n            <Button1 htmlType=\"button\" onClick={onReset}>\r\n              Reset\r\n            </Button1>\r\n\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    : null }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst TransactionUserTable = (props) => {\r\n\r\n\r\n  return(\r\n    <Table striped bordered hover>\r\n    <thead>\r\n      <tr>\r\n        <th>ID</th>\r\n        <th>Name</th>\r\n        <th>Email</th>\r\n        <th>Account Type</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {\r\n        props.user.map(u =>\r\n          <tr key={Math.random()}>\r\n            <td>{u.id}</td>\r\n            <td>{u.name}</td>\r\n            <td>{u.email}</td>\r\n            <td>{u.accounttype}</td>\r\n          </tr>\r\n      )\r\n      }\r\n    </tbody>\r\n  </Table>\r\n  )\r\n}\r\nconst TransactionAccountTable = (props) => {\r\n\r\n  let { transactionstate, transactiondispatch } = useContext(TransactionContext);\r\n  \r\n  const history = useHistory();\r\n  let { path, url } = useRouteMatch();\r\n  const { accountId } = useParams();\r\n\r\n\r\n  // fetch values from heroku, current context has only 1 Account value in initialState\r\n  useEffect(\r\n    async ()=> {\r\n      await getAccounts(transactiondispatch);\r\n    },\r\n    [] // to get call only once\r\n  ) // fetch values from heroku, current context has only 1 Account value in initialState\r\n\r\n\r\n  return(\r\n    <Table striped bordered hover>\r\n    <thead>\r\n      <tr>\r\n        <th>#</th>\r\n        <th>ID</th>\r\n        <th>Name</th>\r\n        <th>Balance</th>\r\n        <th>Account Type</th>\r\n        <th>Transactions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {\r\n        transactionstate.Accounts.map(u =>\r\n          <tr key={Math.random()}>\r\n            <td onClick={()=>{deleteAccount(transactiondispatch, u.id)}} ><DeleteOutlined />Delete</td>\r\n            <td onClick={()=>{history.push(`${url.replace('accountTable','account')}/`+u.id)}}>{u.id}</td>\r\n\r\n            <td>{u.name}</td>\r\n            <td>{u.balance}</td>\r\n            <td>{u.type}</td>\r\n            <td>\r\n              <Table striped bordered hover>\r\n              <thead>\r\n                <tr>\r\n                  <th>Status</th>\r\n                  <th>Amount</th>\r\n                  <th>Due date</th>\r\n                  <th>Type</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                u.transactions != null ?\r\n\r\n                  u.transactions.map(t => \r\n                    <tr>\r\n                      <td>{t.status}</td>\r\n                      <td>{t.amount}</td>\r\n                      <td>{t.due_date}</td>\r\n                      <td>{t.type}</td>\r\n                    </tr>\r\n                    )\r\n                    : \r\n                    null\r\n                }\r\n                </tbody>\r\n                </Table>\r\n            </td>\r\n          </tr>\r\n      )\r\n      }\r\n    </tbody>\r\n  </Table>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nfunction AddNewUser (props) {\r\n\r\n  let { transactionstate, transactiondispatch } = useContext(TransactionContext);\r\n\r\n  const [status, setStatus] = useState(null);\r\n  \r\n\r\n  const setAccountData = async (values) => {\r\n    await setAccount(transactiondispatch, {\r\n      id: Math.floor(Math.random() * 100), name: values.Name,  balance: 0, type: values.accounttype, linked_accounts: [], transactions: []\r\n    }); // sent json (Account obj) built from values \r\n  }\r\n\r\n  const formRef = React.createRef();\r\n\r\n\r\n  const { Option } = Select;\r\n\r\n\r\n  let addContact = (values) => transactiondispatch({ \r\n      type: \"ADD_CONTACT\",\r\n      payload: { id: Math.floor(Math.random() * 100), name: values.Name, email: values.Email, accounttype: values.accounttype } \r\n    });\r\n\r\n    let addAccount = (values) => transactiondispatch({\r\n      type: \"add-account\", \r\n      payload: {  id: Math.floor(Math.random() * 100),  name: values.Name,  balance: 0, type: values.accounttype, linked_accounts: [], transactions: [] }\r\n    })\r\n\r\n  var onFinish = values => {\r\n    // console.log(values);\r\n    // addContact(values)\r\n    addAccount(values);\r\n    setAccountData(values);\r\n  };\r\n  var onReset = () => {\r\n    formRef.current.resetFields();\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 8\r\n    },\r\n    wrapperCol: {\r\n      span: 16\r\n    }\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 8,\r\n      span: 16\r\n    }\r\n  };\r\n  const onAccountTypeChange = (value) => {\r\n    //console.log(\"Account type selected is \"+ value);\r\n  }\r\n\r\n  return(\r\n      <div>\r\n        <Form {...layout}\r\n        ref={formRef}\r\n        name=\"control-ref\"\r\n        onFinish={onFinish}\r\n      >\r\n        <Form.Item\r\n          name=\"Name\"\r\n          label=\"Name\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Please input your Name!'\r\n            }\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"Email\"\r\n          label=\"Email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Please input your Email!',\r\n            }\r\n          ]}\r\n        >\r\n        \r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"accounttype\" label=\"Account Type\" rules={[{ required: true,},]}\r\n        >\r\n          <Select\r\n            placeholder=\"Select Your Account Type\"\r\n            onChange={onAccountTypeChange}\r\n            allowClear\r\n          >\r\n            <Option value=\"CURRENT\">CURRENT</Option>\r\n            <Option value=\"SAVING\">SAVING</Option>\r\n            <Option value=\"SALARY\">SALARY</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button1 type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button1>\r\n          <Button1 htmlType=\"button\" onClick={onReset}>\r\n            Reset\r\n          </Button1>\r\n\r\n        </Form.Item>\r\n      </Form>\r\n      <h1>{transactionstate.success_message != null ? <AddedSuccess setStatus={setStatus} /> : null} </h1>\r\n      </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nfunction MyAppBody (props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <NavBar />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-1\"></div>\r\n                <div className=\"col-md-10\">\r\n                    {/* <Chatting /> Adding chat only after login sucess  */} \r\n                    {/* <Login /> */}\r\n                    <NavBody />\r\n                </div>\r\n                <div className=\"col-md-1\"></div>\r\n            </div>\r\n            \r\n      </div>\r\n    )\r\n}\r\n\r\n\r\nconst NavBar = () => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    let { path, url } = useRouteMatch();\r\n\r\n    return(\r\n        <div>\r\n          <AppBar position=\"static\">\r\n              <Toolbar>\r\n              <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                  <MenuIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" className={classes.title}>\r\n                  News\r\n              </Typography>\r\n              <Button color=\"inherit\" onClick={()=>{history.push(`${url}/myAccount`)}}>My Account</Button>\r\n              <Button color=\"inherit\" onClick={()=>{history.push(`${url}/login`)}}>Login</Button>\r\n              <Button color=\"inherit\">Sign Up</Button>\r\n              </Toolbar>\r\n          </AppBar>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst NavBody = () => {\r\n\r\n  const history = useHistory();\r\n  let { path, url } = useRouteMatch();\r\n\r\n  return(\r\n    <div>\r\n      <Switch>\r\n        <Route exact path={path}>\r\n        </Route>\r\n        <Route path={`${path}/myAccount`}>\r\n          <div>\r\n          <TransactionCheck />\r\n          </div>\r\n        </Route>\r\n        <Route path={`${path}/login`}>\r\n          <Login />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nconst Chatting = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <Paper square className={classes.paper}>\r\n                <Typography className={classes.text} variant=\"h5\" gutterBottom>\r\n                Inbox\r\n                </Typography>\r\n                <List className={classes.list}>\r\n                {messages.map(({ id, primary, secondary, person }) => (\r\n                    <React.Fragment key={id}>\r\n                    {id === 1 && <ListSubheader className={classes.subheader}>Today</ListSubheader>}\r\n                    {id === 3 && <ListSubheader className={classes.subheader}>Yesterday</ListSubheader>}\r\n                    <ListItem button>\r\n                        <ListItemAvatar>\r\n                        <Avatar alt=\"Profile Picture\" src={person} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={primary} secondary={secondary} />\r\n                    </ListItem>\r\n                    </React.Fragment>\r\n                ))}\r\n                </List>\r\n            </Paper>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\n\r\nfunction Login(props) {\r\n\r\n    const [username, setUsername] = useState(\"a\"); // Matching username\r\n    const [password, setPassword] = useState(\"a\"); // Matching pwd\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false); // Login or Sucess Message\r\n\r\n    const [show, setShow] = useState(false); // ToastMsg\r\n\r\n    const CollectionCreateForm = ({ visible, onCreate, onCancel }) => {\r\n        const [form] = Form.useForm();\r\n        return (\r\n          <Modal\r\n            visible={visible}\r\n            title=\"Login\"\r\n            okText=\"Login\"\r\n            cancelText=\"Cancel\"\r\n            onCancel={onCancel}\r\n            onOk={() => {\r\n              form\r\n                .validateFields()\r\n                .then((values) => {\r\n                  form.resetFields();\r\n                  onCreate(values);\r\n                })\r\n                .catch((info) => {\r\n                  console.log('Validate Failed:', info);\r\n                });\r\n            }}\r\n          >\r\n            <Form\r\n              form={form}\r\n              layout=\"vertical\"\r\n              name=\"form_in_modal\"\r\n              initialValues={{\r\n                modifier: 'public',\r\n              }}\r\n            >\r\n              <Form.Item\r\n                name=\"username\"\r\n                label=\"User Name\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: 'Please enter username!',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              <Form.Item name=\"password\" label=\"Password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please enter password!',\r\n                },\r\n              ]}\r\n              >\r\n                <Input type=\"password\" />\r\n              </Form.Item>\r\n              \r\n            </Form>\r\n          </Modal>\r\n        );\r\n      };\r\n\r\n\r\n    const ToastMsg = () => {\r\n\r\n\r\n        return(\r\n            <Toast onClose={() => setShow(false)} show={show} delay={2000} autohide>\r\n                <ToastHeader>\r\n                <strong className=\"mr-auto\">Try Again</strong>\r\n                <small>few mins ago</small>\r\n                </ToastHeader>\r\n                <ToastBody>Wrong credentials ... ... ...</ToastBody>\r\n            </Toast>\r\n        )\r\n    }\r\n\r\n    const CollectionsPage = () => {\r\n        const [visible, setVisible] = useState(false);\r\n      \r\n        const onCreate = (values) => {\r\n          console.log('Received values of form: ', values);\r\n        //   console.log('values.username ', values.username);\r\n        //   console.log('values.password ', values.password);\r\n        \r\n        // \r\n\r\n        if(values.username === username && values.password === password){\r\n            console.log(\"Login success\");\r\n            setIsLoggedIn(true); // dont show login again\r\n        }\r\n        else{\r\n            setShow(true);     // trigger ToastMsg default initialise True\r\n\r\n        }\r\n\r\n          \r\n            setVisible(false); // trigger pre existing logic of modal\r\n        };\r\n      \r\n        return (\r\n          <div>\r\n            <Button1\r\n              type=\"primary\"\r\n              onClick={() => {\r\n                setVisible(true);\r\n              }}\r\n            >\r\n              Login\r\n            </Button1>\r\n            <CollectionCreateForm\r\n              visible={visible}\r\n              onCreate={onCreate}\r\n              onCancel={() => {\r\n                setVisible(false);\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n      };\r\n\r\nconst LoggedIn = () => {\r\n    return(\r\n        <div>\r\n            <div>Logged In</div>\r\n            <Button1\r\n              type=\"primary\"\r\n              onClick={() => setIsLoggedIn(false)}\r\n            >\r\n              Log Out\r\n            </Button1>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n    return(\r\n            <div className=\"MainDiv\">\r\n                <div className=\"jumbotron text-center\">\r\n                    <div className=\"container\">\r\n                    {isLoggedIn ? <div><LoggedIn /><Chatting /></div> : <CollectionsPage />}  \r\n                    <ToastMsg />\r\n                    </div>                      \r\n                </div>\r\n\r\n            </div>\r\n        );\r\n}\r\n\r\nconst LeftSider = () => {\r\n    return(\r\n        <div>\r\n            {/* <div>Left Sider Func</div> */}\r\n        </div>\r\n    )\r\n}\r\nconst RightSider = () => {\r\n    return(\r\n        <div>\r\n            {/* <div>Right Sider Func</div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyAppComponent;\r\n\r\n\r\n\r\n","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Context\\TransactionContext.js",["185","186","187"],"import React from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport AddedSuccess from \"../Component/Success/AddedSuccess\";\r\n\r\nconst TransactionContext = React.createContext();\r\n\r\nlet initialState = {\r\n    id: \"99\",\r\n    status: \"NONE\",\r\n    payee_name: \"NONE\",\r\n    amount: 0.00,\r\n    due_date: \"10/10/1970\",\r\n    type: \"NONE\",\r\n    success_message: null,\r\n    Account: null,\r\n    transactions : [\r\n        {\r\n            id: \"0\",            \r\n            accountid: null,\r\n            status: \"PENDING\",\r\n            payee_name: \"abcd\",\r\n            amount: 1000.00,\r\n            due_date: \"10/10/2020\",\r\n            type: \"DEBITED\",\r\n        }\r\n    ],\r\n    contacts: [\r\n        {\r\n          id: \"098\",\r\n          name: \"Diana Prince\",\r\n          email: \"diana@us.army.mil\",\r\n          accounttype: \"CURRENT\"\r\n        },\r\n        {\r\n          id: \"099\",\r\n          name: \"Bruce Wayne\",\r\n          email: \"bruce@batmail.com\",\r\n          accounttype: \"CURRENT\"\r\n        },\r\n        {\r\n          id: \"100\",\r\n          name: \"Clark Kent\",\r\n          email: \"clark@metropolitan.com\",\r\n          accounttype: \"CURRENT\"\r\n        }\r\n      ],\r\n      Accounts: [\r\n        {\r\n            id: \"1\",\r\n            name: \"1111\",\r\n            balance: 10000,\r\n            type: \"CURRENT\",\r\n            linked_accounts: [\r\n                \"1234\",\r\n                \"1478\",\r\n                \"1598\"\r\n            ],\r\n            transactions: [\r\n                {\r\n                    id: \"0\",\r\n                    status: \"PENDING\",\r\n                    payee_name: \"abcd\",\r\n                    amount: 1000.00,\r\n                    due_date: \"10/10/2020\",\r\n                    type: \"DEBITED\"\r\n\r\n                },\r\n                {\r\n                    id: \"0\",\r\n                    status: \"PENDING\",\r\n                    payee_name: \"abcd\",\r\n                    amount: 1000.00,\r\n                    due_date: \"10/10/2020\",\r\n                    type: \"DEBITED\"\r\n\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nlet reducer = (state, action) => {\r\n\r\n    switch(action.type) {\r\n        case \"reset\":\r\n            return initialState;\r\n        case \"set-status\":\r\n            return { ...state, status: action.payload };\r\n        case \"set-payee_name\":\r\n            return { ...state, payee_name: action.payload };\r\n        case \"set-amount\":\r\n            return { ...state, amount: action.payload };\r\n        case \"set-due_date\":\r\n            return { ...state, due_date: action.payload };\r\n        case \"set-type\":\r\n            return { ...state, type: action.payload }; \r\n        case \"add-transaction\":\r\n            const newTransationArr = [...state.transactions];     // const newArr = [...state.transactions, action.payload];\r\n            newTransationArr.push(action.payload);\r\n            return { ...state, transactions: newTransationArr};      \r\n        \r\n        case \"ADD_CONTACT\":\r\n            return {\r\n                contacts: [...state.contacts, action.payload]\r\n            };    \r\n\r\n        case \"add-account-transaction\":\r\n            const Arr = [...state.Accounts];\r\n            const ID = action.payload.accountID; // passing ID from MyApp.js\r\n            const Acc = Arr.find(a => a.id == ID);\r\n            if (Acc != null){\r\n                Acc.transactions.push(action.payload.transaction) // passing transaction from MyApp.js\r\n            }\r\n            //console.log(action.payload.transaction);\r\n            //console.log(Acc);\r\n            return {\r\n                ...state, Accounts: Arr\r\n            };\r\n            \r\n        case \"add-account\":\r\n            const AccArr = [...state.Accounts];\r\n            AccArr.push(action.payload);\r\n\r\n            return {\r\n                ...state, Accounts: AccArr\r\n            }\r\n\r\n        case \"FETCH-ACCOUNTS\":\r\n            return {\r\n                ...state, Accounts: action.payload\r\n            }\r\n\r\n        // case \"FETCH-ACCOUNT-ByID\":\r\n        //     return {\r\n        //         ...state, Accounts: action.payload\r\n        //     }    \r\n\r\n        case \"FETCH-TRANSACTIONS\":\r\n            return {\r\n                ...state, transactions: action.payload\r\n            }\r\n\r\n        case \"show-success-toast\":\r\n            return { ...state, success_message: action.payload };    \r\n    }\r\n};\r\n\r\nfunction TransactionProvider(props) {\r\n    \r\n    let [transactionstate, transactiondispatch] = React.useReducer( reducer, initialState );\r\n    let value = { transactionstate, transactiondispatch };\r\n\r\n    return (\r\n        <TransactionContext.Provider value= {value}> { props.children } </TransactionContext.Provider>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const getAccounts = async dispatch => {\r\n        // get user info handler (HOW TO USE)\r\n        // const getUserInfoHandler = async () => {\r\n        //     await getUser(userDispatch);\r\n        //     setLoading(userDispatch, false);\r\n        // };\r\n    await axios\r\n            .get(`https://my-banking-json-server.herokuapp.com/Accounts`) \r\n            .then(res => {\r\n                const result = res.data;\r\n                console.log(result);\r\n                dispatch({\r\n                    type: \"FETCH-ACCOUNTS\",\r\n                    payload: result   \r\n                })\r\n            })\r\n\r\n}\r\n\r\nexport const getAccount = async ( dispatch, id ) => {\r\n    return await axios\r\n            .get(`https://my-banking-json-server.herokuapp.com/Accounts/`+id)\r\n            .then( res => res.data )\r\n}\r\n\r\nexport const setAccount = async ( dispatch, account ) => {\r\n    await axios\r\n            .post(`https://my-banking-json-server.herokuapp.com/Accounts`, account)\r\n            .then(res => {\r\n                console.log(res);\r\n                // getting error for this dispatch only contacts coming, not Accounts, not setting all values correctly\r\n                // dispatch({\r\n                //     type: \"add-account\",\r\n                //     payload: res.data\r\n                // })\r\n                dispatch({\r\n                    type: \"show-success-toast\",\r\n                    payload: res.status\r\n                })\r\n                //return res.status;\r\n            })\r\n}\r\n\r\nexport const deleteAccount = async (dispatch, id ) => {\r\n    await axios\r\n            .delete(`https://my-banking-json-server.herokuapp.com/Accounts/`+ id )\r\n            .then(res => {\r\n                console.log(res);\r\n                getAccounts(dispatch);\r\n            })\r\n}\r\n\r\nexport const putAccount = async ( dispatch, account ) => {\r\n    await axios\r\n            .put(`https://my-banking-json-server.herokuapp.com/Accounts/`+account.id, account)\r\n            .then(res => {\r\n                console.log(res);\r\n                getAccounts(dispatch);\r\n            })\r\n}\r\n\r\n\r\n\r\nexport const getTransactions = async dispatch => {\r\n    await axios\r\n            .get(`https://my-banking-json-server.herokuapp.com/Transactions`) \r\n            .then(res => {\r\n                const result = res.data;\r\n                console.log(result);\r\n                dispatch({\r\n                    type: \"FETCH-TRANSACTIONS\",\r\n                    payload: result   \r\n                })\r\n            })\r\n\r\n}\r\n\r\nexport const setTransaction = async ( dispatch, transaction ) => { // /Transactions with -> new accountId field\r\n    await axios\r\n            .post(`https://my-banking-json-server.herokuapp.com/Transactions`, transaction)\r\n            .then(res => {\r\n                console.log(res);\r\n            })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet TransactionConsumer = TransactionContext.Consumer;\r\n\r\n\r\nexport { TransactionProvider, TransactionConsumer, TransactionContext }","F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Common\\Header\\Header.js",[],"F:\\react-handson\\React-Tasks\\TrainingReactJS\\src\\Component\\Success\\AddedSuccess.js",["188"],"import React, { useState, useContext } from 'react'\r\n\r\nimport { TransactionContext } from \"../../Context/TransactionContext\"\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport ToastHeader from 'react-bootstrap/ToastHeader';\r\nimport ToastBody from 'react-bootstrap/ToastBody';\r\n\r\n\r\n\r\nfunction AddedSuccess (props) {\r\n\r\n    const [show, setShow] = useState(true); // ToastMsg\r\n    let { transactionstate, transactiondispatch } = useContext(TransactionContext);\r\n\r\nfunction doWork(){\r\n    console.log(\"click\")\r\n    setShow(false);\r\n    transactiondispatch({type:\"show-success-toast\", payload: null})\r\n}\r\n\r\n    return(\r\n        <div>\r\n            <Toast onClose={ doWork } show={show} autohide>\r\n                <ToastHeader>\r\n                <strong className=\"mr-auto\">Success</strong>\r\n                <small>few mins ago</small>\r\n                </ToastHeader>\r\n                <ToastBody>Account added Success</ToastBody>\r\n            </Toast>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default AddedSuccess;\r\n",{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":7,"column":17,"nodeType":"195","messageId":"196","endLine":7,"endColumn":26},{"ruleId":"193","severity":1,"message":"197","line":35,"column":10,"nodeType":"195","messageId":"196","endLine":35,"endColumn":20},{"ruleId":"193","severity":1,"message":"198","line":35,"column":21,"nodeType":"195","messageId":"196","endLine":35,"endColumn":34},{"ruleId":"193","severity":1,"message":"199","line":36,"column":10,"nodeType":"195","messageId":"196","endLine":36,"endColumn":16},{"ruleId":"193","severity":1,"message":"200","line":36,"column":17,"nodeType":"195","messageId":"196","endLine":36,"endColumn":26},{"ruleId":"193","severity":1,"message":"201","line":37,"column":16,"nodeType":"195","messageId":"196","endLine":37,"endColumn":23},{"ruleId":"193","severity":1,"message":"202","line":2,"column":17,"nodeType":"195","messageId":"196","endLine":2,"endColumn":26},{"ruleId":"193","severity":1,"message":"203","line":8,"column":10,"nodeType":"195","messageId":"196","endLine":8,"endColumn":15},{"ruleId":"193","severity":1,"message":"204","line":8,"column":17,"nodeType":"195","messageId":"196","endLine":8,"endColumn":23},{"ruleId":"205","severity":1,"message":"206","line":13,"column":5,"nodeType":"207","messageId":"208","endLine":22,"endColumn":6},{"ruleId":"193","severity":1,"message":"209","line":4,"column":8,"nodeType":"195","messageId":"196","endLine":4,"endColumn":17},{"ruleId":"193","severity":1,"message":"210","line":12,"column":9,"nodeType":"195","messageId":"196","endLine":12,"endColumn":16},{"ruleId":"193","severity":1,"message":"211","line":2,"column":10,"nodeType":"195","messageId":"196","endLine":2,"endColumn":23},{"ruleId":"193","severity":1,"message":"212","line":6,"column":27,"nodeType":"195","messageId":"196","endLine":6,"endColumn":43},{"ruleId":"193","severity":1,"message":"213","line":13,"column":5,"nodeType":"195","messageId":"196","endLine":13,"endColumn":21},{"ruleId":"193","severity":1,"message":"214","line":17,"column":5,"nodeType":"195","messageId":"196","endLine":17,"endColumn":14},{"ruleId":"215","severity":1,"message":"216","line":86,"column":46,"nodeType":"217","endLine":86,"endColumn":95},{"ruleId":"193","severity":1,"message":"194","line":1,"column":16,"nodeType":"195","messageId":"196","endLine":1,"endColumn":25},{"ruleId":"193","severity":1,"message":"218","line":5,"column":10,"nodeType":"195","messageId":"196","endLine":5,"endColumn":14},{"ruleId":"193","severity":1,"message":"203","line":5,"column":16,"nodeType":"195","messageId":"196","endLine":5,"endColumn":21},{"ruleId":"193","severity":1,"message":"204","line":5,"column":23,"nodeType":"195","messageId":"196","endLine":5,"endColumn":29},{"ruleId":"193","severity":1,"message":"219","line":26,"column":9,"nodeType":"195","messageId":"196","endLine":26,"endColumn":14},{"ruleId":"193","severity":1,"message":"220","line":28,"column":12,"nodeType":"195","messageId":"196","endLine":28,"endColumn":17},{"ruleId":"193","severity":1,"message":"194","line":1,"column":16,"nodeType":"195","messageId":"196","endLine":1,"endColumn":25},{"ruleId":"193","severity":1,"message":"218","line":7,"column":10,"nodeType":"195","messageId":"196","endLine":7,"endColumn":14},{"ruleId":"193","severity":1,"message":"203","line":7,"column":16,"nodeType":"195","messageId":"196","endLine":7,"endColumn":21},{"ruleId":"193","severity":1,"message":"204","line":7,"column":23,"nodeType":"195","messageId":"196","endLine":7,"endColumn":29},{"ruleId":"193","severity":1,"message":"221","line":27,"column":11,"nodeType":"195","messageId":"196","endLine":27,"endColumn":24},{"ruleId":"193","severity":1,"message":"219","line":28,"column":9,"nodeType":"195","messageId":"196","endLine":28,"endColumn":14},{"ruleId":"193","severity":1,"message":"220","line":32,"column":12,"nodeType":"195","messageId":"196","endLine":32,"endColumn":17},{"ruleId":"193","severity":1,"message":"222","line":33,"column":11,"nodeType":"195","messageId":"196","endLine":33,"endColumn":23},{"ruleId":"193","severity":1,"message":"203","line":3,"column":16,"nodeType":"195","messageId":"196","endLine":3,"endColumn":21},{"ruleId":"193","severity":1,"message":"204","line":3,"column":23,"nodeType":"195","messageId":"196","endLine":3,"endColumn":29},{"ruleId":"193","severity":1,"message":"221","line":11,"column":11,"nodeType":"195","messageId":"196","endLine":11,"endColumn":24},{"ruleId":"193","severity":1,"message":"219","line":12,"column":9,"nodeType":"195","messageId":"196","endLine":12,"endColumn":14},{"ruleId":"193","severity":1,"message":"219","line":43,"column":9,"nodeType":"195","messageId":"196","endLine":43,"endColumn":14},{"ruleId":"193","severity":1,"message":"220","line":45,"column":12,"nodeType":"195","messageId":"196","endLine":45,"endColumn":17},{"ruleId":"193","severity":1,"message":"221","line":12,"column":11,"nodeType":"195","messageId":"196","endLine":12,"endColumn":24},{"ruleId":"193","severity":1,"message":"220","line":63,"column":12,"nodeType":"195","messageId":"196","endLine":63,"endColumn":17},{"ruleId":"193","severity":1,"message":"223","line":1,"column":27,"nodeType":"195","messageId":"196","endLine":1,"endColumn":35},{"ruleId":"193","severity":1,"message":"221","line":12,"column":11,"nodeType":"195","messageId":"196","endLine":12,"endColumn":24},{"ruleId":"193","severity":1,"message":"221","line":10,"column":11,"nodeType":"195","messageId":"196","endLine":10,"endColumn":24},{"ruleId":"193","severity":1,"message":"220","line":48,"column":12,"nodeType":"195","messageId":"196","endLine":48,"endColumn":17},{"ruleId":"193","severity":1,"message":"194","line":1,"column":16,"nodeType":"195","messageId":"196","endLine":1,"endColumn":25},{"ruleId":"193","severity":1,"message":"224","line":1,"column":37,"nodeType":"195","messageId":"196","endLine":1,"endColumn":47},{"ruleId":"193","severity":1,"message":"225","line":3,"column":27,"nodeType":"195","messageId":"196","endLine":3,"endColumn":33},{"ruleId":"193","severity":1,"message":"218","line":6,"column":10,"nodeType":"195","messageId":"196","endLine":6,"endColumn":14},{"ruleId":"193","severity":1,"message":"203","line":6,"column":16,"nodeType":"195","messageId":"196","endLine":6,"endColumn":21},{"ruleId":"193","severity":1,"message":"204","line":6,"column":23,"nodeType":"195","messageId":"196","endLine":6,"endColumn":29},{"ruleId":"193","severity":1,"message":"226","line":6,"column":31,"nodeType":"195","messageId":"196","endLine":6,"endColumn":44},{"ruleId":"193","severity":1,"message":"227","line":8,"column":10,"nodeType":"195","messageId":"196","endLine":8,"endColumn":23},{"ruleId":"193","severity":1,"message":"228","line":69,"column":22,"nodeType":"195","messageId":"196","endLine":69,"endColumn":34},{"ruleId":"215","severity":1,"message":"229","line":174,"column":8,"nodeType":"217","endLine":174,"endColumn":44},{"ruleId":"215","severity":1,"message":"229","line":179,"column":5,"nodeType":"217","endLine":179,"endColumn":41},{"ruleId":"193","severity":1,"message":"194","line":1,"column":16,"nodeType":"195","messageId":"196","endLine":1,"endColumn":25},{"ruleId":"193","severity":1,"message":"223","line":1,"column":27,"nodeType":"195","messageId":"196","endLine":1,"endColumn":35},{"ruleId":"193","severity":1,"message":"230","line":27,"column":49,"nodeType":"195","messageId":"196","endLine":27,"endColumn":54},{"ruleId":"193","severity":1,"message":"231","line":27,"column":56,"nodeType":"195","messageId":"196","endLine":27,"endColumn":64},{"ruleId":"193","severity":1,"message":"232","line":27,"column":66,"nodeType":"195","messageId":"196","endLine":27,"endColumn":70},{"ruleId":"193","severity":1,"message":"233","line":27,"column":80,"nodeType":"195","messageId":"196","endLine":27,"endColumn":88},{"ruleId":"193","severity":1,"message":"234","line":29,"column":10,"nodeType":"195","messageId":"196","endLine":29,"endColumn":22},{"ruleId":"193","severity":1,"message":"235","line":29,"column":24,"nodeType":"195","messageId":"196","endLine":29,"endColumn":36},{"ruleId":"193","severity":1,"message":"211","line":33,"column":10,"nodeType":"195","messageId":"196","endLine":33,"endColumn":23},{"ruleId":"193","severity":1,"message":"236","line":164,"column":11,"nodeType":"195","messageId":"196","endLine":164,"endColumn":20},{"ruleId":"193","severity":1,"message":"237","line":175,"column":7,"nodeType":"195","messageId":"196","endLine":175,"endColumn":13},{"ruleId":"193","severity":1,"message":"238","line":272,"column":9,"nodeType":"195","messageId":"196","endLine":272,"endColumn":25},{"ruleId":"193","severity":1,"message":"239","line":275,"column":9,"nodeType":"195","messageId":"196","endLine":275,"endColumn":15},{"ruleId":"240","severity":1,"message":"241","line":278,"column":5,"nodeType":"242","endLine":281,"endColumn":6},{"ruleId":"240","severity":1,"message":"243","line":282,"column":5,"nodeType":"244","endLine":282,"endColumn":7,"suggestions":"245"},{"ruleId":"193","severity":1,"message":"246","line":437,"column":9,"nodeType":"195","messageId":"196","endLine":437,"endColumn":13},{"ruleId":"193","severity":1,"message":"236","line":438,"column":11,"nodeType":"195","messageId":"196","endLine":438,"endColumn":20},{"ruleId":"240","severity":1,"message":"241","line":443,"column":5,"nodeType":"242","endLine":445,"endColumn":6},{"ruleId":"240","severity":1,"message":"247","line":446,"column":5,"nodeType":"244","endLine":446,"endColumn":7,"suggestions":"248"},{"ruleId":"193","severity":1,"message":"237","line":515,"column":10,"nodeType":"195","messageId":"196","endLine":515,"endColumn":16},{"ruleId":"193","severity":1,"message":"249","line":530,"column":7,"nodeType":"195","messageId":"196","endLine":530,"endColumn":17},{"ruleId":"193","severity":1,"message":"246","line":656,"column":11,"nodeType":"195","messageId":"196","endLine":656,"endColumn":15},{"ruleId":"193","severity":1,"message":"210","line":679,"column":9,"nodeType":"195","messageId":"196","endLine":679,"endColumn":16},{"ruleId":"193","severity":1,"message":"250","line":680,"column":15,"nodeType":"195","messageId":"196","endLine":680,"endColumn":18},{"ruleId":"193","severity":1,"message":"251","line":734,"column":22,"nodeType":"195","messageId":"196","endLine":734,"endColumn":33},{"ruleId":"193","severity":1,"message":"252","line":735,"column":22,"nodeType":"195","messageId":"196","endLine":735,"endColumn":33},{"ruleId":"193","severity":1,"message":"253","line":4,"column":8,"nodeType":"195","messageId":"196","endLine":4,"endColumn":20},{"ruleId":"205","severity":1,"message":"206","line":85,"column":5,"nodeType":"207","messageId":"208","endLine":146,"endColumn":6},{"ruleId":"254","severity":1,"message":"255","line":111,"column":44,"nodeType":"256","messageId":"257","endLine":111,"endColumn":46},{"ruleId":"193","severity":1,"message":"238","line":13,"column":11,"nodeType":"195","messageId":"196","endLine":13,"endColumn":27},"no-native-reassign",["258"],"no-negated-in-lhs",["259"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'HeaderName' is assigned a value but never used.","'setHeaderName' is assigned a value but never used.","'IsBack' is assigned a value but never used.","'setIsBack' is assigned a value but never used.","'setData' is assigned a value but never used.","'Component' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Container' is defined but never used.","'history' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'PieChartOutlined' is defined but never used.","'siderLayoutArray' is assigned a value but never used.","'siderJson' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Link' is defined but never used.","'match' is assigned a value but never used.","'value' is assigned a value but never used.","'globalContext' is assigned a value but never used.","'handleSelect' is assigned a value but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'Button' is defined but never used.","'useRouteMatch' is defined but never used.","'GlobalContext' is defined but never used.","'setAccordion' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Radio' is defined but never used.","'Dropdown' is defined but never used.","'Menu' is defined but never used.","'Checkbox' is defined but never used.","'DownOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'accountId' is assigned a value but never used.","'status' is assigned a value but never used.","'transactionstate' is assigned a value but never used.","'amount' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'account', 'accountId', and 'transactiondispatch'. Either include them or remove the dependency array.","ArrayExpression",["260"],"'path' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'transactiondispatch'. Either include it or remove the dependency array.",["261"],"'addContact' is assigned a value but never used.","'url' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'AddedSuccess' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},"Update the dependencies array to be: [account, accountId, transactiondispatch]",{"range":"266","text":"267"},"Update the dependencies array to be: [transactiondispatch]",{"range":"268","text":"269"},[8661,8663],"[account, accountId, transactiondispatch]",[13318,13320],"[transactiondispatch]"]